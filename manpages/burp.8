.\" manual page [] for Burp
.\" SH section heading
.\" SS subsection heading
.\" LP paragraph
.\" IP indented paragraph
.\" TP hanging label
.TH Burp 8 "Burp"
.SH NAME
Burp \- BackUp and Restore Program
.SH SYNOPSIS
.B burp [OPTIONS]
.SH DESCRIPTION
.LP
BackUp and Restore Program.

.SH SERVER OPTIONS
.TP
\fB\-c\fR \fB[path]\fR
Short for 'config file'. The argument is a path to the config file. The default
is /etc/burp/burp.conf.
.TP
\fB\-n\fR \fB\fR
No forking mode. The program will accept a single query, deal with it, and then
exit. This is useful for debugging. Implies '\-F'.
.TP
\fB\-F\fR \fB\fR
Foreground mode. The server will fork into the background and run as a daemon if you do not give this option.
.TP
\fB\-g\fR \fB\fR
Generate initial CA keys and certificates, and then exit.
.TP
\fB\-i\fR \fB\fR
Print an index table of symbols that humans may see burp produce, and exit.
.TP
\fB\-l\fR \fB[path]\fR
Path to log file. The default is stdout. This option overrides the
.IR logfile
option in the config file. Use 
.I /dev/null
to deactivate or '' to reactivate output.
.TP
\fB\-a s\fR \fB\fR
Run this to connect to a running server to get a live monitor of the status of all your backup clients. If your server config file is not in the default location, you will also need to specify the path with the '\-c' option. The live monitor requires ncurses support at compile time.
.TP
\fB\-a S\fR \fB\fR
Similar to '\-a s', but it prints the main status monitor summary screen to stdout. The intention is that a script can run this and email an administrator the output on a cron job. This doesn't require ncurses support. There are additional options that can be given with '\-a S', listed below. These enable logs and contents of backups to be listed whilst logged in on the server machine.
.TP
ADDITIONAL SERVER OPTIONS TO USE WITH '\-a S'
.TP
\fB\-C\fR \fB[client]\fR
Limit the output to a single client.
.TP
\fB\-b\fR \fB[number]\fR
Show listable files in a particular backup (requires \-C).
.TP
\fB\-z\fR \fB[file]\fR
Dump a particular log file in a backup (requires \-C and \-b).
.TP
\fB\-d\fR \fB[path]\fR
Show a particular path in a backup (requires \-C and \-b).

.SH CLIENT OPTIONS
.TP
\fB\-a\fR \fB[b|t|r|l|L|v|e]\fR
Short for 'action'. The arguments mean backup, timed backup, restore, list, long list, verify, or estimate, respectively.
.TP
\fB\-b\fR \fB[number|a]\fR
Short for 'backup number'. The argument is a number, or 'a' to select all
backups.
.TP
\fB\-c\fR \fB[path]\fR
Short for 'config file'. The argument is a path to the config file. The default
is /etc/burp/burp.conf, or C:\\Program Files\\Burp\\burp.conf on Windows.
.TP
\fB\-d\fR \fB[path]\fR
Short for 'directory'. When restoring, the argument is a path to an alternative directory to restore to. When listing, the argument is the directory to list.
.TP
\fB\-f\fR \fB[path]\fR
Short for 'force overwrite'. Without this option set, a restore will not
overwrite existing files.
.TP
\fB\-i\fR \fB\fR
Print an index table of symbols that humans may see burp produce, and exit.
.TP
\fB\-r\fR \fB[regex]\fR
Short for 'regular expression'. The argument is a regular expression with
which to match backup files. Use it for lists and restores.
.TP
\fB\-l\fR \fB[path]\fR
Short for 'log file'. The argument is a path to the log file. The default
is stdout. This option overrides the
.IR logfile
option in the config file. Use 
.I /dev/null
to deactivate or '' to reactivate output.
.TP
\fB\-s\fR \fB[number]\fR
For use with restores \- strip a number of leading path components.

.SH EXAMPLES
.TP
\fBburp \-a b\fR
Runs a backup.
.TP
\fBburp \-a l\fR
Lists the available backups and dates.
.TP
\fBburp \-a l \-b 1\fR
Lists all the files in backup number 1.
.TP
\fBburp \-a l \-b 1 \-l /dev/null\fR
Lists all the files in backup number 1 without extra debug info.
.TP
\fBburp \-a l \-b a\fR
Lists all the files in all the backups.
.TP
\fBburp \-a l \-b 1 \-r myregex\fR
Lists all the files in backup number 1 that match the regular expression 'myregex'.
.TP
\fBburp \-a L \-b 1 \-r myregex\fR
Long lists all the files in backup number 1 that match the regular expression 'myregex'. This is like doing an 'ls \-l'.
.TP
\fBburp \-a r \-b 1 \-r myregex\fR
Restores all the files in backup number 1 that match the regular expression 'myregex' back to their original location.
.TP
\fBburp \-a r \-b 1 \-r myregex \-d /tmp/restoredir\fR
Restores all the files in backup number 1 that match the regular expression 'myregex' into the directory /tmp/restoredir.
.TP
\fBburp \-a r \-b 1 \-r myregex \-d /tmp/restoredir \-s 2\fR
Restores all the files in backup number 1 that match the regular expression 'myregex' into the directory /tmp/restoredir and strip 2 leading path components.
.TP
\fBburp \-a r\fR
Restores all the files in the most recent backup to their original location.
.TP
\fBburp \-a v\fR
Verifies the most recent backup.
.TP
\fBburp \-a v \-b 1 \-r myregex\fR
Verifies everything in backup number 1 that matches the regular expression 'myregex'.
.TP
\fBburp \-a t\fR
Timed backup. The same as 'burp \-a b', except that a script is run on the server before deciding to go ahead. The intention is that this command will be run on a repeating cron job with a short interval, and that the server will decide when it is time for a new backup.
.TP
\fBburp \-a L \-b 1 \-d ''\fR
Long list the top level directory of backup 1.
.TP
\fBburp \-a L \-b 1 \-d '/home/graham'\fR
Long list the /home/graham directory of backup 1. These '\-d' versions of the list function provide the ability to 'browse' backups.

.SH SERVER CONFIGURATION FILE OPTIONS

.TP
\fB. [path]\fR
Read an additional configuration file.
.TP
\fBmode=server\fR
Required to run in server mode.
.TP
\fBport=[port number]\fR
Defines the main TCP port that the server listens on.
.TP
\fBstatus_port=[port number]\fR
Defines the TCP port that the server listens on for status requests.
.TP
\fBdaemon=[0|1]\fR
Whether to daemonise. The default is 1.
.TP
\fBfork=[0|1]\fR
Whether to fork children. The default is 1.
.TP
\fBdirectory=[path]\fR
Path to the directory in which to store backups.
.TP
\fBdirectory_tree=[0|1]\fR
When turned on (which is the default) and the client is on version 1.3.6 or greater, the structure of the storage directory will mimic that of the original filesystem on the client.
.TP
\fBtimestamp_format=[strftime format]\fR
This allows you to tweak the format of the timestamps of individual backups. See 'man strftime' to see available substitutions. If this option is unset, burp uses "%Y-%m-%d %H:%M:%S".
.TP
\fBclientconfdir=[path]\fR
Path to the directory that contains client configuration files.
.TP
\fBlockfile=[path]\fR
Path to the lockfile that ensures that two server processes cannot run
simultaneously.
.TP
\fBpidfile=[path]\fR
Synonym for lockfile.
.TP
\fBlogfile=[path]\fR
Path to the logfile.
.TP
\fBsyslog=[0|1]\fR
Log to syslog.
.TP
\fBkeep=[number]\fR
Number of backups to keep. This can be overriddden by the client configuration
files in clientconfdir on the server. Specify multiple 'keep' entries on separate lines in order to keep multiple periods of backups. For example, assuming that you are doing a backup a day, keep=7 keep=4 keep=6 (on separate lines) will keep 7 daily backups, 4 weekly backups (7x4=28), and 6 multiples of 4 weeks (7x4x6=168) \- roughly 6 monthly backups. Effectively, you will be guaranteed to be able to restore up to 168 days ago, with the number of available backups exponentially decreasing as you go back in time to that point. In this example, every 7th backup will be hardlinked to allow burp to safely delete intermediate backups when necessary. You can have as many 'keep' lines as you like, as long as they don't exceed 52560000 when multiplied together. That is, a backup every minute for 100 years.
.TP
\fBhardlinked_archive=[0|1]\fR
On the server, defines whether to keep hardlinked files in the backups, or whether to generate reverse deltas and delete the original files. Can be set to either 0 (off) or 1 (on). Disadvantage: More disk space will be used Advantage: Restores will be faster, and since no reverse deltas need to be generated, the time and effort the server needs at the end of a backup is reduced.
.TP
\fBmax_hardlinks=[number]\fR
On the server, the number of times that a single file can be hardlinked. The bedup program also obeys this setting. The default is 10000.
.TP
\fBlibrsync=[0|1]\fR
When set to 0, delta differencing will not take place. That is, when a file changes, the server will request the whole new file. The default is 1. This option can be overridden by the client configuration files in clientconfdif on the server.
.TP
\fBcompression=gzip[0-9]\fR
Choose the level of gzip compression. Setting 0 or gzip0 turns compression off. The default is gzip9. This option can be overridden by the client configuration files in clientconfdif on the server.
.TP
\fBclient_lockdir=[path]\fR
Path to the directory in which to keep per-client lock files. By default, this is set to the path given by the 'directory' option.
.TP
\fBuser=[username]\fR
Run as a particular user. This can be overridden by the client configuration files in clientconfdir on the server.
.TP
\fBgroup=[groupname]\fR
Run as a particular group. This can be overridden by the client configuration files in clientconfdir on the server.
.TP
\fBumask=[umask]\fR
Set the file creation umask. Default is 0022.
.TP
\fBratelimit=[Mb/s]\fR
Set the network send rate limit, in Mb/s. If this option is not given, burp will send data as fast as it can.
.TP
\fBnetwork_timeout=[s]\fR
Set the network timeout in seconds. If no data is sent or received over a period of this length, burp will give up. The default is 7200 seconds (2 hours).
.TP
\fBworking_dir_recovery_method=[resume|use|delete]\fR
This option tells the server what to do when it finds the working directory of an interrupted backup (perhaps somebody pulled the plug on the server, or something). This can be overridden by the client configurations files in clientconfdir
on the server. Options are...
.TP
\fBdelete:\fR Just delete the old working directory.
.TP
\fBuse:\fR Convert the working directory into a complete backup.
.TP
\fBresume:\fR Simply continue the previous backup from the point at which it left off. NOTE: If the client has changed its include/exclude configuration since the backup was interrupted, the recovery method will automatically switch to 'use'.
.TP
\fBclient_can_force_backup=[0|1]\fR
Turn this off to prevent clients from forcing backups with the '\-a b' option. Timed backups will still work. The default is that clients can force backups.
.TP
\fBclient_can_list=[0|1]\fR
Turn this off to prevent clients from listing backups with the '\-a l' option. The default is that clients can list backups.
.TP
\fBclient_can_restore=[0|1]\fR
Turn this off to prevent clients from initiating restores with the '\-a r' option. The default is that clients can initiate restores.
.TP
\fBclient_can_verify=[0|1]\fR
Turn this off to prevent clients from initiating a verify job with the '\-a v' option. The default is that clients can initiate a verify job.
.TP
\fBssl_cert_ca=[path]\fR
The path to the SSL CA certificate. This file will probably be the same on both the server and the client. The file should contain just the certificate in PEM format. For more information on this, and the other ssl_* options, please see docs/burp_ca.txt.
.TP
\fBssl_cert=[path]\fR
The path to the server SSL certificate. It works for me when the file contains the concatenation of the certificate and private key in PEM format.
.TP
\fBssl_key=[path]\fR
The path to the server SSL private key in PEM format.
.TP
\fBssl_key_password=[password]\fR
The SSL key password.
.TP
\fBssl_cert_password=[password]\fR
Synonym for ssl_key_password.
.TP
\fBssl_dhfile=[path]\fR
Path to Diffie-Hellman parameter file. To generate one with openssl, use a command like this: openssl dhparam \-out dhfile.pem \-5 1024
.TP
\fBmax_children=[number]\fR
Defines the number of child processes to fork (the number of clients that can simultaneously connect. The default is 5.
.TP
\fBmax_status_children=[number]\fR
Defines the number of status child processes to fork (the number of status clients that can simultaneously connect. The default is 5.
.TP
\fBmax_storage_subdirs=[number]\fR
Defines the number of subdirectories in the data storage areas. The maximum number of subdirectories that ext3 allows is 32000. If you do not set this option, it defaults to 30000.
.TP
\fBtimer_script=[path]\fR
Path to the script to run when a client connects with the timed backup option. If the script exits with code 0, a backup will run. The first two arguments are the client name and the path to the 'current' storage directory. The next three arguments are reserved, and user arguments are appended after that. An example timer script is provided. The timer_script option can be overriddden by the client configuration files in clientconfdir on the server.
.TP
\fBtimer_arg=[string]\fR
A user-definable argument to the timer script. You can have many of these. The timer_arg options can be overriddden by the client configuration files in clientconfdir on the server.
.TP
\fBnotify_success_script=[path]\fR
Path to the script to run when a backup succeeds. User arguments are appended after the first five reserved arguments. An example notify script is provided. The notify_success_script option can be overriddden by the client configuration files in clientconfdir on the server.
.TP
\fBnotify_success_arg=[string]\fR
A user-definable argument to the notify success script. You can have many of these. The notify_success_arg options can be overriddden by the client configuration files in clientconfdir on the server.
.TP
\fBnotify_success_warnings_only=[0|1]\fR
Set to 1 to send success notifications when there were warnings. If this and notify_success_changes_only are not turned on, success notifications are always sent.
.TP
\fBnotify_success_changes_only=[0|1]\fR
Set to 1 to send success notifications when there were new or changed files. If this and notify_success_warnings_only are not turned on, success notifications are always sent.
.TP
\fBnotify_failure_script=[path]\fR
The same as notify_success_script, but for backups that failed.
.TP
\fBnotify_failure_arg=[string]\fR
The same as notify_failure_arg, but for backups that failed.
.TP
\fBdedup_group=[string]\fR
Enables you to group clients together for file deduplication purposes. For example, you might want to set 'dedup_group=xp' for each Windows XP client, and then run the bedup program on a cron job every other day with the option '\-g xp'.
.TP
\fBserver_script_pre=[path]\fR
Path to a script to run on the server after each successfully authenticated connection but before any work is carried out. The arguments to it are 'pre', '(client command)', 'reserved3' to 'reserved5', and then arguments defined by server_script_pre_arg. If the script returns non-zero, the task asked for by the client will not be run. This command and related options can be overriddden by the client configuration files in clientconfdir on the server.
.TP
\fBserver_script_pre_arg=[string]\fR
A user-definable argument to the server pre script. You can have many of these.
.TP
\fBserver_script_post=[path]\fR
Path to a script to run on the server before the client disconnects. The arguments to it are 'post', '(client command)', 'reserved3' to 'reserved5', and then arguments defined by server_script_post_arg. This command and related options can be overriddden by the client configuration files in clientconfdir on the server.
.TP
\fBserver_script_post_arg=[string]\fR
A user-definable argument to the server post script. You can have many of these.
.TP
\fBserver_script=[path]\fR
You can use this to save space in your config file when you want to run the same server script twice. It overrides server_script_pre and server_script_post. This command and related options can be overriddden by the client configuration files in clientconfdir on the server.
.TP
\fBserver_script_arg=[path]\fR
Goes with server_script and overrides server_script_pre_arg and server_script_post_arg.
.TP
\fBserver_script_post_run_on_fail=[0|1]\fR
If this is set to 1, server_script_post will always be run. The default is 0, which means that if the task asked for by the client fails, server_script_post will not be run.
.TP
\fBautoupgrade_dir=[path]\fR
Path to autoupgrade directory from which upgrades are downloaded. The option can be left unset in order not to autoupgrade clients. Please see docs/autoupgrade.txt in the source package for more help with this option.
.TP
\fBca_conf=[path]\fR
Path to certificate authority configuration file. The CA configuration file will usually be /etc/burp/CA.cnf. The CA directory indicated by CA.cnf will usually be /etc/burp/CA. If ca_conf is set and the CA directory does not exist, the server will create, populate it, and the paths indicated by ssl_cert_ca, ssl_cert, ssl_key and ssl_dhfile will be overwritten. For more detailed information on this and the other ca_* options, please see docs/burp_ca.txt.
.TP
\fBca_name=[name]\fR
Name of the CA that the server will generate when using the ca_conf option.
.TP
\fBca_server_name=[name]\fR
The name that the server will put into its own SSL certficates when using the ca_conf option.
.TP
\fBca_burp_ca=[path]\fR
Path to the burp_ca script when using the ca_conf option.

.SH CLIENT CONFIGURATION FILE OPTIONS

.TP
\fB. [path]\fR
Read an additional configuration file.
.TP
\fBmode=client\fR
Required to run in client mode.
.TP
\fBserver=[IP address or hostname]\fR
Defines the server to connect to.
.TP
\fBport=[port number]\fR
Defines the TCP port that the server is listening on.
.TP
\fBcname=[password]\fR
Defines the client name to identify as to the server.
.TP
\fBpassword=[password]\fR
Defines the password to send to the server.
.TP
\fBlockfile=[path]\fR
Path to the lockfile that ensures that two client processes cannot run
simultaneously (this currently doesn't work on Windows).
.TP
\fBpidfile=[path]\fR
Synonym for lockfile.
.TP
\fBlogfile=[path]\fR
Path to the logfile.
.TP
\fBsyslog=[0|1]\fR
Log to syslog.
.TP
\fBuser=[username]\fR
Run as a particular user (not supported on Windows).
.TP
\fBgroup=[groupname]\fR
Run as a particular group (not supported on Windows).
.TP
\fBratelimit=[Mb/s]\fR
Set the network send rate limit, in Mb/s. If this option is not given, burp will send data as fast as it can.
.TP
\fBnetwork_timeout=[s]\fR
Set the network timeout in seconds. If no data is sent or received over a period of this length, burp will give up. The default is 7200 seconds (2 hours).
.TP
\fBca_burp_ca=[path]\fR
Path to the burp_ca script (burp_ca.bat on Windows). For more information on this, please see docs/burp_ca.txt.
.TP
\fBca_csr_dir=[path]\fR
Directory where certificate signing requests are generated. For more information on this, please see docs/burp_ca.txt.
.TP
\fBssl_cert_ca=[path]\fR
The path to the SSL CA certificate. This file will probably be the same on both the server and the client. The file should contain just the certificate in PEM format. For more information on this and the other ssl_* options, please see docs/burp_ca.txt.
.TP
\fBssl_cert=[path]\fR
The path to the client SSL certificate. It works for me when the file contains the concatenation of the certificate and private key in PEM format.
.TP
\fBssl_key=[path]\fR
The path to the client SSL private key in PEM format.
.TP
\fBssl_key_password=[password]\fR
The SSL key password.
.TP
\fBssl_cert_password=[password]\fR
Synonym for ssl_key_password.
.TP
\fBssl_peer_cn=[string]\fR
Must match the common name in the SSL certificate that the server gives when it connects. If ssl_peer_cn is not set, the server name will be used instead.
.TP
\fBencryption_password=[password]\fR
Set this to enable client side file Blowfish encryption. If you do not want encryption, leave this field out of your config file. \fBIMPORTANT:\fR Configuring this renders delta differencing pointless, since the smallest real change to a file will make the whole file look different. Therefore, activating this option turns off delta differencing so that whenever a client file changes, the whole new file will be uploaded on the next backup. \fBALSO IMPORTANT:\fR If you manage to lose your encryption password, you will not be able to unencrypt your files. You should therefore think about having a copy of the encryption password somewhere off-box, in case of your client hard disk failing. \fBFINALLY:\fR If you change your encryption password, you will end up with a mixture of files on the server with different encryption and it may become tricky to restore more than one file at a time. For this reason, if you change your encryption password, you may want to start a fresh chain of backups (by moving the original set aside, for example). Burp will cope fine with turning the same encryption password on and off between backups, and will restore a backup of mixed encrypted and unencrypted files without a problem.
.TP
\fBbackup_script_pre=[path]\fR
Path to a script to run before a backup. The arguments to it are 'pre', 'reserved2' to 'reserved5', and then arguments defined by backup_script_pre_arg.
.TP
\fBbackup_script_pre_arg=[string]\fR
A user-definable argument to the backup pre script. You can have many of these.
.TP
\fBbackup_script_post=[path]\fR
Path to a script to run after a backup. The arguments to it are 'post', [0|1] if the backup failed or succeeded, 'reserved3' to 'reserved5', and then arguments defined by backup_script_post_arg.
.TP
\fBbackup_script_post_arg=[string]\fR
A user-definable argument to the backup post script. You can have many of these.
.TP
\fBbackup_script_post_run_on_fail=[0|1]\fR
If this is set to 1, backup_script_post will be run whether the backup succeeds or not. The default is 0, which means that backup_script_post will only be run if the backup succeeds.
.TP
\fBrestore_script_pre=[path]\fR
Path to a script to run before a restore. The arguments to it are 'pre', 'reserved2' to 'reserved5', and then arguments defined by restore_script_pre_arg.
.TP
\fBrestore_script_pre_arg=[string]\fR
A user-definable argument to the restore pre script. You can have many of these.
.TP
\fBrestore_script_post=[path]\fR
Path to a script to run after a restore. The arguments to it are 'post', [0|1] if the restore failed or succeeded, 'reserved3' to 'reserved5', and then arguments defined by restore_script_post_arg.
.TP
\fBrestore_script_post_arg=[string]\fR
A user-definable argument to the restore post script. You can have many of these.
.TP
\fBrestore_script_post_run_on_fail=[0|1]\fR
If this is set to 1, restore_script_post will be run whether the restore succeeds or not. The default is 0, which means that restore_script_post will only be run if the restore succeeds.
.TP
\fBbackup_script=[path]\fR
You can use this to save space in your config file when you want to run the same script before and after a backup. It overrides backup_script_pre and backup_script_post.
.TP
\fBbackup_script_arg=[path]\fR
Goes with backup_script and overrides backup_script_pre_arg and backup_script_post_arg.
.TP
\fBrestore_script=[path]\fR
You can use this to save space in your config file when you want to run the same script before and after a restore. It overrides restore_script_pre and restore_script_post.
.TP
\fBrestore_script_arg=[path]\fR
Goes with restore_script and overrides restore_script_pre_arg and restore_script_post_arg.
.TP
\fBautoupgrade_dir=[path]\fR
Path to autoupgrade directory into which upgrades are downloaded. Please see docs/autoupgrade.txt in the source package for more help with this option. If you do not want your client to autoupgrade, do not set this option.
.TP
\fBautoupgrade_os=[string]\fR
Name of the client operating system. Should match a directory name in the server's autoupgrade_dir. If you do not want your client to autoupgrade, do not set this option.

.SH INCLUDES / EXCLUDES

.TP
The following options specify exactly what is backed up. The client can specify these options, or if you include at least one 'include=' in the client configuration files on the server, the server will override them all.
.TP
\fBinclude=[path]\fR
Path to include in the backup. You can have multiple include lines. Use forward slashes '/', not backslashes '\\' as path delimiters.
.TP
\fBexclude=[path]\fR
Path to exclude from the backup. You can have multiple exclude lines. Use forward slashes '/', not backslashes '\\' as path delimiters.
.TP
\fBinclude_ext=[extension]\fR
Extensions to include in the backup. Case insensitive. Nothing else will be included in the backup. You can have multiple include extension lines. For example, set 'txt' to include files that end in '.txt'. You need to specify an 'include' line so that burp knows where to start looking.
.TP
\fBexclude_ext=[extension]\fR
Extensions to exclude from the backup. Case insensitive. You can have multiple exclude extension lines. For example, set 'vdi' to exclude VirtualBox disk images.
.TP
\fBexclude_fs=[fstype]\fR
File systems to exclude from the backup. Case insensitive. You can have multiple exclude file system lines. For example, set 'tmpfs' to exclude tmpfs. Burp has an internal mapping of file system names to file system IDs. If you know the file system ID, you can use that instead. For example, 'exclude_fs = 0x01021994' will also exclude tmpfs.
.TP
\fBmin_file_size=[b/Kb/Mb/Gb]\fR
Do not back up files that are less than the specified size. Example: 'min_file_size = 10Mb'. Set to 0 (the default) to have no limit.
.TP
\fBmax_file_size=[b/Kb/Mb/Gb]\fR
Do not back up files that are greater than the specified size. Example: 'max_file_size = 10Mb'. Set to 0 (the default) to have no limit.
.TP
\fBcross_filesystem=[path]\fR
Allow backups to cross a particular filesystem mountpoint.
.TP
\fBcross_all_filesystems=[0|1]\fR
Allow backups to cross all filesystem mountpoints.
.TP
\fBnobackup=[file name]\fR
If this file system entry exists, the directory containing it will not be backed up.
.TP
\fBread_fifo=[path]\fR
Do not back up the given fifo itself, but open it for reading and back up the contents as if it were a regular file.
.TP
\fBread_all_fifos=[0|1]\fR
Open all fifos for reading and back up the contents as if they were regular files.
.TP
\fBread_blockdev=[path]\fR
Do not back up the given block device itself, but open it for reading and back up the contents as if it were a regular file.
.TP
\fBread_all_blockdevs=[0|1]\fR
Open all block devices for reading and back up the contents as if they were regular files.

.SH SERVER CLIENTCONFDIR FILE
.TP
For the server to know about clients that can contact it, you need to place a file named after the client in clientconfdir.
.TP
The file name must match the name in the 'cname' field on the client.
.TP
\fBssl_peer_cn=[string]\fR must match the common name in the SSL certificate that the client gives when it connects. If ssl_peer_cn is not set, the client name will be used instead (the clientconfdir file name).
.TP
The file needs to contain a line like \fBpassword=[password]\fR that matches the same field on the client, or \fBpasswd=[encrypted password]\fR \- where the plain text password on the client will be tested against an encrypted password of the kind you might find in /etc/passwd.
.TP
Additionally, the following options can be overridden here for each client:
\fBdirectory\fR
\fBdirectory_tree\fR
\fBtimestamp_format\fR
\fBkeep\fR
\fBworking_dir_recovery_method\fR
\fBlibrsync\fR
\fBsyslog\fR
\fBclient_can_force_backup\fR
\fBclient_can_list\fR
\fBclient_can_restore\fR
\fBclient_can_verify\fR
\fBcompression\fR
\fBtimer_script\fR
\fBtimer_arg\fR
\fBnotify_success_script\fR
\fBnotify_success_arg\fR
\fBnotify_success_warnings_only\fR
\fBnotify_failure_script\fR
\fBnotify_failure_arg\fR
\fBdedup_group\fR
\fBserver_script_pre\fR
\fBserver_script_pre_arg\fR
\fBserver_script_post\fR
\fBserver_script_post_arg\fR
\fBserver_script\fR
\fBserver_script_arg\fR
\fBserver_script_post_run_on_fail\fR
.TP
Additionally, the includes and excludes can be overridden here, as described in the section above.
.TP
As with the other configuration files, extra configuration can be included with the '. path/to/config/file' syntax.

.SH Some notes on SSL certificates
.TP
The burp example configs come with example SSL certificates and keys. You can use these and burp will work. But if you are worried about network security, you should generate your own certificates and keys and point your config files to them. To create the example files, I used a handy interface to openssl, called 'tinyca' (http://tinyca.sm-zone.net/). If you are using Debian, you can run 'apt-get install tinyca' to get it. There is also the option of using burp_ca, which you can find in the source distribution, courtesy of Patrick Koppen.

.SH Examining backups
.TP
As well as using the client list options described above, you can go directly to the storage directory on the server. The backups for a client are in the directory named after the client. Inside each backup directory is a file called manifest.gz.
.TP
This contains a list of all the files in the backup, and where they originally came from on the client.
.TP
There is also a 'log.gz' file in the backup directory, which contains the output generated by the server during the backup.
.TP
The 'data' directory contains complete backup files.
.TP
The 'deltas.reverse' directory contains reverse deltas that can be applied to the data from the next backup in the sequence (indicated by the contents of the 'forward' file).
.TP
Anything with a .gz suffix is compressed in gzip format.  You can use standard tools, such as zcat, zless or cp, to view them or copy them elsewhere.

.SH Server initiated backups
.TP
You can queue a backup on the server, to be performed when the client next makes contact. To do this, you put a file called 'backup' into the top level of the client storage directory. The contents of the file are ignored.

.SH Server initiated restores
.TP
You can queue a restore on the server, to be performed when the client next makes contact. To do this, you put a file called 'restore' into the top level of the client storage directory. Valid fields to include in the restore file are:
.TP
\fBbackup=[number|a]\fR
The number of the backup to restore from. Equivalent to '\-b' when initiating a restore from the client.
.TP
\fBoverwrite=[0|1]\fR
Whether to overwrite existing files. Equivalent to '\-f' when initiating a restore from the client.
.TP
\fBstrip=[number]\fR
Number of leading path components to strip. Equivalent to '\-s' when initiating a restore from the client.
.TP
\fBrestoreprefix=[path]\fR
Prefix to the restore path. Equivalent to '\-d' when initiating a restore from the client.
.TP
\fBregex=[regular expression]\fR
Only restore files matching the regular expression. Equivalent to '\-r' when initiating a restore from the client.
.TP
\fBinclude=[path]\fR
Restore directories and files that match the path. If it is a directory, the contents of the directory will be restored. You can have multiple 'include' lines. There is no equivalent when initiating a restore from the client.
.TP
As a minimum, the 'restore' file needs to contain a 'backup' option, and one 'regex' or 'include' line.

.SH BUGS
If you find bugs, please report them to the email list. See the website
<http://burp.grke.net/> for details.

.SH AUTHOR
The main author of Burp is Graham Keeling.

.SH COPYRIGHT
See the LICENCE file included with the source distribution.
